import matplotlib.pyplot as plt
import numpy as np

#종류 변수 선언
fd = '\u2610'           #피더
hline_fd = '\u2500'     #피더에 연결된 수평방향 선로
vline_fd = '\u2502'     #피더에 연결된 수직방향 선로
hline_load = '\u2500'   #부하에 연결된 수평방향 선로
vline_load = '\u2502'   #부하에 연결된 수직방향 선로
sw = '\u25CB'           #개폐기

#(x좌표, y좌표, 종류, 값[kVA])
#([8,8,0,0]) -> 얘는 분기점 if문에 사용하기 위해서 굳이 넣었고, 좌표값만 알면돼서 종류랑 값은 모두 0
#피더에 연결된 수평, 수직방향 선로 + 개폐기는 값 없음
#분기점에 연결된 3개 부하 선로 (위1개, 왼쪽1개, 오른쪽 1개) 는 부하값을 다 넣어줬음
#나중에 직선경로부하 구할 때 한번 빼주면 되니까,,

#row*2+1 , col*2+1 이거 두 개 곱하면 전체 개수가 나옴 

L=[
    [[0,0,0,0], [0,1,0,0], [0,2,0,0], [0,3,0,0], [0,4,0,0], [0,5,0,0], [0,6,0,0], [0,7,0,0], [0,8,fd,5500], [0,9,0,0], [0,10,0,0], [0,11,0,0], [0,12,0,0], [0,13,0,0], [0,14,0,0]], 
    [[1,0,0,0], [1,1,0,0], [1,2,0,0], [1,3,0,0], [1,4,0,0], [1,5,0,0], [1,6,0,0], [1,7,0,0], [1,8,vline_fd,0], [1,9,0,0], [1,10,0,0], [1,11,0,0], [1,12,0,0], [1,13,0,0], [1,14,0,0]], 
    [[2,0,0,0], [2,1,0,0], [2,2,0,0], [2,3,0,0], [2,4,0,0], [2,5,0,0], [2,6,0,0], [2,7,0,0], [2,8,sw,0], [2,9,0,0], [2,10,0,0], [2,11,0,0], [2,12,0,0], [2,13,0,0], [2,14,0,0]], 
    [[3,0,0,0], [3,1,0,0], [3,2,0,0], [3,3,0,0], [3,4,0,0], [3,5,0,0], [3,6,0,0], [3,7,0,0], [3,8,vline_load,1500], [3,9,0,0], [3,10,0,0], [3,11,0,0], [3,12,0,0], [3,13,0,0], [3,14,0,0]], 
    [[4,0,0,0], [4,1,0,0], [4,2,0,0], [4,3,0,0], [4,4,0,0], [4,5,0,0], [4,6,0,0], [4,7,0,0], [4,8,sw,0], [4,9,0,0], [4,10,0,0], [4,11,0,0], [4,12,0,0], [4,13,0,0], [4,14,0,0]], 
    [[5,0,0,0], [5,1,0,0], [5,2,0,0], [5,3,0,0], [5,4,0,0], [5,5,0,0], [5,6,0,0], [5,7,0,0], [5,8,vline_load,1000], [5,9,0,0], [5,10,0,0], [5,11,0,0], [5,12,0,0], [5,13,0,0], [5,14,0,0]], 
    [[6,0,0,0], [6,1,0,0], [6,2,0,0], [6,3,0,0], [6,4,0,0], [6,5,0,0], [6,6,0,0], [6,7,0,0], [6,8,sw,0], [6,9,0,0], [6,10,0,0], [6,11,0,0], [6,12,0,0], [6,13,0,0], [6,14,0,0]], 
    [[7,0,0,0], [7,1,0,0], [7,2,0,0], [7,3,0,0], [7,4,0,0], [7,5,0,0], [7,6,0,0], [7,7,0,0], [7,8,vline_load,1000], [7,9,0,0], [7,10,0,0], [7,11,0,0], [7,12,0,0], [7,13,0,0], [7,14,0,0]], 
    [[8,0,fd,14000], [8,1,hline_fd,0], [8,2,sw,0], [8,3,hline_load,1000], [8,4,sw,0], [8,5,hline_load,500], [8,6,sw,0], [8,7,hline_load,1000], [8,8,0,0], [8,9,hline_load,1000], [8,10,sw,0], [8,11,hline_load,500], [8,12,sw,0], [8,13,hline_fd,0], [8,14,fd,4500]]
  ]
#Max(col*2+1, row*2+1), #20일 때 12, 12*20/Max(col*2+1, row*2+1)

# figure와 ax 객체 생성
fig, ax = plt.subplots()

# x 값을 0부터 20까지 1000개의 점으로 나눔
#x = np.linspace(0, 20, 1000)

# x 축의 범위를 0에서 까지로 지정 #행, 열 값을 받아와서 설정 
plt.xlim(0, 20)

# y 축의 범위를 0에서 까지로 지정
plt.ylim(0, 20)

# x 축의 눈금 단위 나타내지 x
plt.xticks([])

# y 축의 눈금 단위 나타내지 x 
plt.yticks([])


# x축과 y축 뒤집기
plt.gca().invert_yaxis()

# x축 위치 바꾸기
ax = plt.gca() # 현재 그래프의 축 객체 가져오기
ax.xaxis.set_ticks_position('top') # x축 위치를 위쪽으로 지정


#
for i in range(9):
    for j in range(15):
        if L[i][j][2] == 0 : #공백 처리 
            plt.plot([])
            
        elif L[i][j][2] == fd : #피더 생성 
            ax.text(j, i, '\u2610' , fontsize=12)
        
        elif L[i][j][2] == hline_fd : #피더 수평 직선 생성
            ax.text(j, i, '──' , fontsize=12)

        elif L[i][j][2] == vline_fd : #피더 수직 직선 생성 
            ax.text(j+0.1, i, '│' , fontsize=12)

        elif L[i][j][2] == hline_load : #부하 수평 직선 생성 
            ax.text(j, i, '──' , fontsize=12)

        elif L[i][j][2] == vline_load : #부하 수직 직선 생성 
            ax.text(j, i, '│' , fontsize=12)

        else :                          #개폐기 생성 
             ax.text(j+0.03, i, '\u25CB' , fontsize=12)
        

#spines 숨기기
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
plt.tick_params(labelbottom=False, labelleft=False)
plt.tick_params(labeltop=False, labelright=False)

# 그래프를 보여줌
plt.show()
            



